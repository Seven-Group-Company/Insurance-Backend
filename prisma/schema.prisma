// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  createdAt       DateTime        @default(now())
  active          Boolean         @default(true)
  photo           String?
  createdBy       Int
  updatedAt       DateTime?
  updatedBy       Int?
  userType        role            @default(employee)
  employeeInfo    employeeInfo?
  otp             otp?
  accessLevelId   Int?
  accessLevel     accessLevel?    @relation(fields: [accessLevelId], references: [id])
  mfa             mfa?
  positionId      Int?
  position        position?       @relation(fields: [positionId], references: [id])
  policyCreatedBy policy[]        @relation("policyCreatedBy")
  policyUpdatedBy policy[]        @relation("policyUpdatedBy")
  clientInfo      clientInfo?
  client_policy   client_policy[]
}

model employeeInfo {
  id            Int            @id @default(autoincrement())
  firstName     String?
  lastName      String?
  otherName     String?
  dateOfBirth   String?
  gender        String?
  maritalStatus maritalStatus?
  nationality   String?
  phone         String?
  address       String?
  email         String         @unique
  isAgent       Boolean        @default(false)
  user          users          @relation(fields: [email], references: [email])
}

model clientInfo {
  id            Int             @id @default(autoincrement())
  firstName     String?
  lastName      String?
  otherName     String?
  dateOfBirth   String?
  gender        String?
  maritalStatus maritalStatus?
  nationality   String?
  phone         String?
  address       String?
  email         String          @unique
  isTempUser    Boolean         @default(true)
  user          users           @relation(fields: [email], references: [email])
  client_policy client_policy[]
}

model otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  createdAt DateTime @default(now())
  user      users    @relation(fields: [email], references: [email])
}

model mfa {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  mfaSecret  String
  mfaQrCode  String
  mfaEnabled Boolean @default(false)
  user       users   @relation(fields: [email], references: [email])
}

model accessLevel {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  permissions Json
  createdAt   DateTime  @default(now())
  createdBy   Int
  updatedAt   DateTime?
  updatedBy   Int?
  users       users[]
}

model position {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  updatedBy   Int?
  users       users[]
}

enum maritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum role {
  admin
  employee
  client
}

// Policy Management 
model policy_category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_by  Int
  created_at  DateTime  @default(now())
  updated_by  Int?
  updated_at  DateTime?
  policy      policy[]
}

model policy {
  id                   Int              @id @default(autoincrement())
  name                 String           @unique
  description          String?
  code                 String?          @unique
  eligibility_criteria String?
  coverage_details     String?
  documents_required   String[]         @default([])
  features             String[]         @default([])
  cover_image          String?
  policy_category_id   Int?
  policy_category      policy_category? @relation(fields: [policy_category_id], references: [id])
  status               policyStatus?    @default(Draft)
  active               Boolean          @default(true)
  created_by           Int
  created_user         users            @relation("policyCreatedBy", fields: [created_by], references: [id])
  created_at           DateTime         @default(now())
  updated_by           Int?
  updated_at           DateTime?
  updated_user         users?           @relation("policyUpdatedBy", fields: [updated_by], references: [id])
  policy_files         policy_files[]
  usersId              Int?
  client_policy        client_policy[]
}

model policy_files {
  id            Int          @id @default(autoincrement())
  policy_id     Int?
  policy        policy?      @relation(fields: [policy_id], references: [id])
  attachment_id Int?
  attachment    attachments? @relation(fields: [attachment_id], references: [id], onDelete: Cascade)
}

model attachments {
  id           Int            @id @default(autoincrement())
  name         String
  type         String?
  url          String
  size         String?
  created_by   Int
  created_at   DateTime       @default(now())
  updated_by   Int?
  updated_at   DateTime?
  policy_files policy_files[]
  client_files client_files[]
}

enum policyStatus {
  Published
  Approved
  Pending
  Rejected
  Draft
  Archived
}

// Client Policy Models
model client_policy {
  id            Int                @id @default(autoincrement())
  client_email  String?
  user          clientInfo?        @relation(fields: [client_email], references: [email])
  policy_id     Int?
  policy        policy?            @relation(fields: [policy_id], references: [id])
  date_enrolled DateTime           @default(now())
  date_expires  DateTime?
  status        clientPolicyStatus @default(Draft)
  agent_id      Int?
  agent         users?             @relation(fields: [agent_id], references: [id])
  client_files  client_files[]
}

model client_files {
  id               Int            @id @default(autoincrement())
  client_policy_id Int?
  client_email     String
  client_policy    client_policy? @relation(fields: [client_policy_id], references: [id])
  attachment_id    Int?
  attachment       attachments?   @relation(fields: [attachment_id], references: [id], onDelete: Cascade)
}

enum clientPolicyStatus {
  Draft
  Pending_Review
  Under_Review
  Approved
  Rejected
}
